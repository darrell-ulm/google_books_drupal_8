<?php
/**
 * @file
 * Module file for google_books.
 *
 * @see \Drupal\google_books\Plugin\Filter\google_books.
 */



/**
 *  Implements hook_theme().
 */
function google_books_theme($existing, $type, $theme, $path) {
  return array(
    'googlebooks_template' => array(
      'variables' => array(
      'title_anchor' => NULL,
      'worldcat_link' => NULL,
      'librarything_link' => NULL,
      'openlibrary_link' => NULL,
      'image' => NULL,
      'reader' => NULL,
      'bib_fields' => NULL,
      'image_height' => NULL,
      'image_width' => NULL,
      'reader_height' => NULL,
      'reader_width' => NULL,
      'api_key' => NULL,
      'info_link' => NULL,
      'isbn' => NULL,
      ),
    ),
  );
}


function template_preprocess_google_books($variables) {
\var_dump("inter");
}


/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $vars
 *   An associative array containing:
 *   - title_anchor: Theme variable with title anchor.
 *   - title_link: Should title be on or off.
 *   - info_link: The cleaned link to the google information page.
 *   - title: The text title.
 *   - isbn: The ISBN if it exists for this Google Book.
 *   - worldcat: Output link to WorldCat data on this book.
 *   - worldcat_link: True or false to display WorldCat link.
 *   - librarything: Output link to LibraryThing data on this book.
 *   - librarything_link: True or false to display LibraryThing link.
 *   - openlibrary: Output link to OpenLibrary data on this book.
 *   - openlibrary_link: True or false to display OpenLibrary link.
 *   - book_image: Theme output <img tag to theme output.
 *   - image_option: Global option for image on or off.
 *   - image_on: Per book option for image on or off.
 *   - thumbnail: The cleaned image thumbnail URL.
 *   - page_curl: Per book option to turn on/off page curl for image.
 *   - reader_height: Option for reader height, per book.
 *   - reader_width: Option for reader width, per book.
 *   - image_height: Option for image height, per book.
 *   - image_width: Option for image width, per book.
 *   - google_books_js_string: Per book Google Books javascript.
 *   - reader_option: Global option for Google Books reader on/off.
 *   - reader_on: Per book option for Google Books reader on/off.
 *   - embeddable: From Google, check if technology and licensing allows embed.
 *   - book_data_array: From theme function, build the list of biblio data.
 *   - selected_bibs: Array of biblio elements selected to include.
 *   - bib_data: Final biblio data to display generated by theme function.
 *
 * @see theme_google_books_biblio()
 * @see google_books_make_html_link()
 */
function google_books_preprocess_googlebooks_template(&$vars) {
	
  dpm("-----------------THE VARS------------------");
  dpm($vars);
	
  // Build the main title with a link.
  //$vars["title_anchor"] = "";
/*  if (isset($vars["title_link"]) && $vars["title_link"] !== 0 && isset($vars["info_link"]) && isset($vars["title"])) {
    $vars["title_anchor"] = l($vars["title"], $vars["info_link"], array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  }
*/

  //$vars["title_anchor"] = l($vars["title"], $vars["info_link"], array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));

  // Show the book links if any are found. Not checked for ISBN validity.
  /*
  if (isset($vars["isbn"])) {
      
        dpm("isbn");
        dpm($vars["isbn"]);
        dpm($vars["worldcat_link"]);
      
        
	$isbn = $vars["isbn"];
	if (!empty($isbn) || TRUE) {
	  $vars["worldcat"] = "";
	  if ($vars["worldcat_link"]) {
		$vars["worldcat"] = Drupal::l(t('WorldCat'), check_url("http://worldcat.org/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
	  }
	  $vars["librarything"] = "";
	  if ($vars["librarything_link"]) {
		$vars["librarything"] = Drupal::l(t('LibraryThing'), check_url("http://librarything.com/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
	  }
	  $vars["openlibrary"] = "";
	  if ($vars["openlibrary_link"]) {
		$vars["openlibrary"] = Drupal::l(t('OpenLibrary'), check_url("http://openlibrary.org/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
	  }
	}
  }
   * 
   */

/*
  // Check if we need to process the image thumbnail, and setup.
  $vars["book_image"] = "";
  $image_option = isset($vars["image_option"]) ? $vars["image_option"] : false;
  $image_on = $vars["image_on"];
  $thumbnail = $vars["thumbnail"];
  if (isset($thumbnail) && ($image_option == 1 || $image_on == 1) && $image_on !== 0) {
    $img_link = $thumbnail;
    if ($vars["page_curl"] == 1) {
      $img_link = str_replace("&edge=nocurl", "", $img_link);
      $img_link .= "&edge=curl";
    }
    if ($vars["page_curl"] == 0) {
      $img_link = str_replace("&edge=curl", "", $img_link);
    }
    // Setup the image array and call theme('image'.
    $vars["book_image"] = theme('image', array(
      'path' => $img_link,
      'alt' => $vars["title"],
      'title' => $vars["title"],
      'width' => $vars["image_width"],
      'height' => $vars["image_height"],
    ));
  }

  // Setup the book reader.
  if (trim($vars["reader_height"]) == '') {
    $vars["reader_height"] = GOOGLE_BOOKS_DEFAULT_READER_HEIGHT;
  }
  if (trim($vars["reader_width"]) == '') {
    $vars["reader_width"] = GOOGLE_BOOKS_DEFAULT_READER_WIDTH;
  }
  $vars["google_books_js_string"] = "";
  $reader_option = $vars["reader_option"];
  $reader_on = $vars["reader_on"];
  if (isset($vars["embeddable"]) && ($reader_option == 1 || $reader_on == 1) && $reader_on !== 0) {
    // Build the string for the google_books viewer.
    $vars["google_books_js_string"] = '
      google.load("books", "0");
      function initialize' . $isbn . '() {
        var viewer' . $isbn . ' = new google.books.DefaultViewer(document.getElementById("viewerCanvas' . $isbn . '"));
        viewer' . $isbn . '.load("ISBN:' . $isbn . '");
      }
      google.setOnLoadCallback(initialize' . $isbn . ');
      ';
  }

  // Setup the data array of biblio items.
  //$vars["book_data_array"] = theme('google_books_biblio', $vars["selected_bibs"]);
  $vars["book_data_array"] = $vars["selected_bibs"];
  
  // Setup the list of biblio data.
  $processed_bibs = array();
  foreach ($vars["selected_bibs"] as $bib_index => $bib_value) {
    $bib_field_name = drupal_ucfirst(preg_replace('/[A-Z]/', ' $0', str_replace('_', ' ', $bib_index)));
    $bib_field_data = google_books_make_html_link($bib_value);
    $processed_bibs[$bib_field_name] = $bib_field_data;
  }
  //$vars["bib_data"] = theme('google_books_biblio', $processed_bibs);
  $vars["bib_data"] = $processed_bibs;
 * 
 */
}

