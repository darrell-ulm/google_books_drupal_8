<?php
/**
 * @file
 * Googlebook Filter Module for Drupal 7.0
 *
 * @author Darrell Ulm.
 *
 * Inspired by the BookPost (Open Library) module for
 * Drupal 6 by Aaron Rubinstein, and on the the OpenLibrary API for Drupal 6.
 *
 * The googlebook module is a filter module
 * that allows a user to insert rich Google Book
 * data into nodes via filters.
 *
 * The fields can be selected to be displayed globally.
 *
 * See the INSTALL.TXT file for specific information.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Holds the address of the books.google.com JSON call
 */
define('GOOGLE_BOOK_EXTERN_JS', 'https://www.google.com/jsapi');

/*
 * Has the Google book reader height default.
 */
define('GOOGLE_BOOK_DEFAULT_READER_HEIGHT', '500');

/*
 * Has the Google book reader width default.
 */
define('GOOGLE_BOOK_DEFAULT_READER_WIDTH', '400');

/**
 * Handles filter tips callback for the googlebook filter module.
 *
 * @param object $filter
 *   The filter variable StdClass object.
 *
 * @param object $format
 *   Format of the filter StdClass object.
 *
 * @param bool $long
 *   Display this filter tip.
 *
 * @return string
 *   The translated help text for the filter.
 */
function googlebook_filter_googlebook_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('Put a Google Book search term between square brackets like this:
      [googlebook:The Hobbit] or [googlebook:9780618154012] or [googlebook:Rucker+Software]
      and this will filter the input to replace with Google Book data
      and images from http://books.google.com');
  }
}


/**
 * Handles filter info hook for googlebook filter with initial values.
 *
 * @return array
 *   Returns the initialized filter information.
 */
function googlebook_filter_info() {
  $filters['googlebook'] = array(
    'title' => t('Google Book'),
    'description' => t('Insert Book Information from Google Books'),
    'process callback' => 'googlebook_filter_process',
    'settings callback' => 'googlebook_filter_settings',
    'cache' => TRUE,
    'default settings' => array(
      'worldcat' => 1,
      'openlibrary' =>  1,
      'librarything' => 1,
      'image' => 1,
      'reader' => 0,
      'reader_height' => GOOGLE_BOOK_DEFAULT_READER_HEIGHT,
      'reader_width' => GOOGLE_BOOK_DEFAULT_READER_WIDTH,
      'image_height' => '',
      'image_width' => '',
      'bib_fields' => googlebookapi_bib_field_array(),
    ),
    'tips callback' => 'googlebook_filter_googlebook_tips',
  );
  return $filters;
}


/**
 * Creates & returns the form for the filter hook for googlebook filter.
 *
 * @param array $form
 *   The array of form elements.
 *
 * @param array &form_state
 *   State of the form information.
 *
 * @param object $filter
 *   The filter information in a StdClass object.
 *
 * @param object $format
 *   The format of the form in a StdClass object.
 *
 * @param array $defaults
 *   Default values array for form elements.
 *
 * @param array $filters
 *   The filters array containing index of objects, each a filter.
 *
 * @return array
 *   Returns the array of form settings for the filter setting page.
 */
function googlebook_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $settings['googlebook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Book Filter'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $settings['googlebook']['bib_fields'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Google Book Data Fields'),
    '#required' => TRUE,
    '#options' => googlebookapi_bib_field_array(),
    '#description' => t('Hold control to select multiple fields.'),
    '#default_value' => isset($filter->settings['googlebook']['bib_fields']) ? $filter->settings['googlebook']['bib_fields'] : googlebookapi_bib_field_array(),
  );

  $settings['googlebook_link'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Book External Link Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Turn on/off the links to external pages linking to book.'),
  );
  $settings['googlebook_link']['worldcat'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to WorldCat'),
    '#default_value' => isset($filter->settings['googlebook_link']['worldcat']) ? $filter->settings['googlebook_link']['worldcat'] : $defaults['worldcat'],
  );
  $settings['googlebook_link']['librarything'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to LibraryThing'),
    '#default_value' => isset($filter->settings['googlebook_link']['librarything']) ? $filter->settings['googlebook_link']['librarything'] : $defaults['librarything'],
  );
  $settings['googlebook_link']['openlibrary'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to Open Library'),
    '#default_value' => isset($filter->settings['googlebook_link']['openlibrary']) ? $filter->settings['googlebook_link']['openlibrary'] : $defaults['openlibrary'],
  );

  $settings['googlebook_image'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Book Image Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Turn on/off the Google Book cover image and set the default size.'),
  );
  $settings['googlebook_image']['image'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include Google book cover image'),
    '#default_value' => isset($filter->settings['googlebook_image']['image']) ? $filter->settings['googlebook_image']['image'] : $defaults['image'],
  );
  $settings['googlebook_image']['image_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Image height'),
    '#size' => 4,
    '#maxlength' => 4,
    '#element_validate' => array('_googlebook_image_or_reader_valid_int_size'),
    '#description' => t('Height of Google cover image'),
    '#default_value' => isset($filter->settings['googlebook_image']['image_height']) ? $filter->settings['googlebook_image']['image_height'] : $defaults['image_height'],
  );
  $settings['googlebook_image']['image_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Image width'),
    '#size' => 4,
    '#maxlength' => 4,
    '#element_validate' => array('_googlebook_image_or_reader_valid_int_size'),
    '#description' => t('Width of Google cover image'),
    '#default_value' => isset($filter->settings['googlebook_image']['image_width']) ? $filter->settings['googlebook_image']['image_width'] : $defaults['image_width'],
  );

  $settings['googlebook_reader'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Book Reader Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Turn on/off the Javascript Google Reader and set the default size.'),
  );
  $settings['googlebook_reader']['reader'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include the Google book reader'),
    '#default_value' => isset($filter->settings['googlebook_reader']['reader']) ? $filter->settings['googlebook_reader']['reader'] : $defaults['reader'],
  );
  $settings['googlebook_reader']['reader_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Reader height'),
    '#size' => 4,
    '#maxlength' => 4,
    '#element_validate' => array('_googlebook_image_or_reader_valid_int_size'),
    '#description' => t('Height of Google reader'),
    '#default_value' => isset($filter->settings['googlebook_reader']['reader_height']) ? $filter->settings['googlebook_reader']['reader_height'] : $defaults['reader_height'],
  );
  $settings['googlebook_reader']['reader_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Reader width'),
    '#size' => 6,
    '#maxlength' => 6,
    '#element_validate' => array('_googlebook_image_or_reader_valid_int_size'),
    '#description' => t('Width of Google reader'),
    '#default_value' => isset($filter->settings['googlebook_reader']['reader_width']) ? $filter->settings['googlebook_reader']['reader_width'] : $defaults['reader_width'],
  );
  return $settings;
}

/**
 * Validation function for image sizes to check for positive int.
 *
 * @param array $element
 *   The form element to validate.
 *
 * @param array $form_state
 *   The state of the form.
 */
function _googlebook_image_or_reader_valid_int_size($element, &$form_state) {
  $image_size_parameter = trim($element['#value']);
  $element_title = $element['#title'];
  if ((!is_numeric($image_size_parameter) || intval($image_size_parameter) < 1) && !empty($image_size_parameter)) {
    form_error($element, t('@title option must contain a valid value. You may either leave the numeric field empty or enter a value greater than 0. For example 75 or 100 or 400.', array('@title' => $element_title)));
  }
}


/**
 * This is the main filter callback process for the google book filter module.
 *
 * @param string $text
 *   Text to match.
 *
 * @param object $filter
 *   The filter as information stdClass object.
 *
 * @param object $format
 *   The text format type stdClass object.
 *
 * @param string $langcode
 *   The language code.
 *
 * @param bool $cache
 *   TRUE if cachable, FALSE if not.
 *
 * @param string $cache_id
 *   The ID of the cache.
 *
 * @return string
 *   Returns string of the filtered HTML for googlebooks.
 */
function googlebook_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  preg_match_all('/\[googlebook:(.*)\]/', $text, $match);
  $tag = $match[0];
  $book = array();
  foreach ($match[1] as $i => $val) {
      $book[$i] = googlebook_retrieve_bookdata(
      $match[1][$i],
      $filter->settings['googlebook_link']['worldcat'],
      $filter->settings['googlebook_link']['librarything'],
      $filter->settings['googlebook_link']['openlibrary'],
      $filter->settings['googlebook_image']['image'],
      $filter->settings['googlebook_reader']['reader'],
      $filter->settings['googlebook']['bib_fields'],
      $filter->settings['googlebook_image']['image_height'],
      $filter->settings['googlebook_image']['image_width'],
      $filter->settings['googlebook_reader']['reader_height'],
      $filter->settings['googlebook_reader']['reader_width']
    );
  }
  $text = str_replace($tag, $book, $text);
  return $text;
}


/**
 * Gets the book data from Google Books / other sites and then displays it.
 *
 * This is the main filter processing function that does the work.
 *
 * @param string $id
 *   The full string pulled from inside the {{$id}} filter.
 *
 * @param string $worldcat_link
 *   True if setting for Worldcat link on.
 *
 * @param string $librarything_link
 *   True if setting for Library Thing link on.
 *
 * @param string $openlibrary_link
 *   True if setting for openlibrary is on.
 *
 * @param string $image_option
 *   Default param, display the book cover.
 *
 * @param string $reader_option
 *   Default param to display book reader Javascript.
 *
 * @param string $bib_field_select
 *   This is the array of True/False for the multi-field.
 *
 * @param string $image_height
 *   Default height of Image.
 *
 * @param string $image_width
 *   Default width of Image.
 *
 * @param string $reader_height
 *   Default Height of Reader.
 *
 * @param string $reader_width
 *   Default Width of Reader.
 *
 * @return string
 *   Returns the HTML data for googlebook after filtering.
 */
function googlebook_retrieve_bookdata(
  $id,
  $worldcat_link,
  $librarything_link,
  $openlibrary_link,
  $image_option,
  $reader_option,
  $bib_field_select,
  $image_height,
  $image_width,
  $reader_height,
  $reader_width
) {
  // Get all the Google Book permissible book data fields.
  $bib_fields = googlebookapi_bib_field_array();

  // Clear some variables so we don't need to do it later.
  $google_viewer = "";
  $title_link = "";
  $img_link = "";
  $title_anchor = "";

  // Separate parameters by '|' delimiter and clean data.
  $params = explode("|", $id);
  array_map('filter_xss', $params);

  $search_string = $params[0];

  // Get the Google Book data.
  // Ignore if googlebookapi_get_googlebook_data returns NULL.
  $bib = googlebookapi_get_googlebook_data($search_string, 0);
  if ($bib != NULL) {
    // Clean the data from Google.
    array_map('filter_xss', $bib);
    $bib['infoLink'] = check_url($bib['infoLink']);

    unset($params[0]);
    $params = array_map('trim', $params);

    // Set the fixed parameters explicitly (not the data fields).
    googlebook_set_param($params, $worldcat_link, "worldcat", 1);
    googlebook_set_param($params, $worldcat_link, "no_worldcat", 0);
    googlebook_set_param($params, $openlibrary_link, "openlibrary", 1);
    googlebook_set_param($params, $openlibrary_link, "no_openlibrary", 0);
    googlebook_set_param($params, $librarything_link, "librarything", 1);
    googlebook_set_param($params, $librarything_link, "no_librarything", 0);
    googlebook_set_param($params, $page_curl, "pagecurl", 1);
    googlebook_set_param($params, $page_curl, "no_pagecurl", 0);
    googlebook_set_param($params, $title_link, "titlelink", 1);
    googlebook_set_param($params, $title_link, "no_titlelink", 0);
    googlebook_set_param($params, $image_on, "image", 1);
    googlebook_set_param($params, $image_on, "no_image", 0);
    googlebook_set_param($params, $reader_on, "reader", 1);
    googlebook_set_param($params, $reader_on, "no_reader", 0);

    // Set the data field parameters explicitly.
    $bib_field_select_explicit = array();
    foreach ($bib_fields as $i => $field_name) {
      $bib_field_select_explicit[$i] = "";
      googlebook_set_param($params, $bib_field_select_explicit[$i], $field_name, "$i");
      googlebook_set_param($params, $bib_field_select_explicit[$i], "no_" . $field_name, FALSE);
    }

    // Merge the selected options with the global bib field options.
    // Use the and operation to default to off.
    foreach ($bib_field_select_explicit as $i => $field_name) {
      if ($bib_field_select_explicit[$i]) {
        $bib_field_select[$i] = $bib_field_select_explicit[$i];
      }
      if ($bib_field_select_explicit[$i] === FALSE) {
        unset($bib_field_select[$i]);
      }
    }

    // If the data is sound then continue.
    if ($bib != FALSE) {
      // Pull an ISBN if we have it, prefer the last
      // which should be an ISBN 13 although may be something else.
      $identifier_list = explode("|", $bib['identifier']);
      $num_of_identifiers = count($identifier_list);
      $isbn = trim($identifier_list[$num_of_identifiers - 1]);
      $isbn = is_numeric($isbn) ? $isbn : "";

      // Build up the the selected bib fields fields.
      $selected_bibs = array();
      foreach ($bib_field_select as $i => $k) {
        $field = $bib_fields[$i];
        if (isset($bib[$field])) {
          $selected_bibs[$field] = $bib [$field];
        }
      }

      // Check if need to process the thumbnail, and setup.
      if (isset($bib['thumbnail']) && ($image_option == 1 || $image_on == 1) && $image_on !== 0) {
        $img_link = $bib['thumbnail'];
        if ($page_curl == 1) {
          $img_link = str_replace("&edge=nocurl", "", $img_link);
          $img_link .= "&edge=curl";
        }
        if ($page_curl == 0) {
          $img_link = str_replace("&edge=curl", "", $img_link);
        }
      }

      // Setup the book reader.
      $googlebook_js_string = "";
      if (isset($bib['embeddable']) && ($reader_option == 1 || $reader_on == 1) && $reader_on !== 0) {
        // Build the special string for the googlebook viewer.
        // Handy for the themer.
        $googlebook_js_string = '
          google.load("books", "0");
          function initialize' . $isbn . '() {
            var viewer' . $isbn . ' = new google.books.DefaultViewer(document.getElementById("viewerCanvas' . $isbn . '"));
            viewer' . $isbn . '.load("ISBN:' . $isbn . '");
          }
          google.setOnLoadCallback(initialize' . $isbn . ');
          ';
      }

      // Build the main title with a link.
      if ($title_link !== 0 && isset($bib['infoLink']) && isset($bib['title'])) {
        $title_anchor = l($bib['title'], check_url($bib['infoLink']), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
      }

      // Show the book links if any are found. Not checked for ISBN validity.
      if (!empty($isbn) || TRUE) {
        $worldcat = "";
        if ($worldcat_link) {
          $worldcat = l(t('WorldCat'), check_url("http://worldcat.org/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
        }
        $librarything = "";
        if ($librarything_link) {
          $librarything = l(t('Library Thing'), check_url("http://librarything.com/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
        }
        $openlibrary = "";
        if ($openlibrary_link) {
          $openlibrary = l(t('Open Library'), check_url("http://openlibrary.org/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
        }
      }

    }

    // Set the default reader size if needed.
    if (trim($reader_height) == '') {
      $reader_height = GOOGLE_BOOK_DEFAULT_READER_HEIGHT;
    }
    if (trim($reader_width) == '') {
      $reader_width = GOOGLE_BOOK_DEFAULT_READER_WIDTH;
    }

    // Build up remaining output to send to template.
    // Pass all information fields for themers future use.
    $vars['selected_bibs'] = $selected_bibs;
    $vars['isbn'] = $isbn;
    $vars['title_anchor'] = $title_anchor;
    $vars['title'] = $bib['title'];
    $vars['librarything'] = $librarything;
    $vars['openlibrary'] = $openlibrary;
    $vars['worldcat'] = $worldcat;
    $vars['image_height'] = $image_height;
    $vars['image_width'] = $image_width;
    $vars['reader_height'] = $reader_height;
    $vars['reader_width'] = $reader_width;
    $vars['googlebook_js_string'] = $googlebook_js_string;
    $vars['img_link'] = $img_link;

    // Send the variables to the theme.
    $output = theme('googlebook_aggregate', $vars);
    return $output;
  }
  else {
    return "";
  }
}


/**
 * Load the global GoogleBook Javascript header.
 *
 * Employ the JS_THEME option for a good load.
 */
function googlebook_init() {
  $js_options = array(
    'type' => 'external',
    'group' => JS_THEME,
  );
  drupal_add_js(GOOGLE_BOOK_EXTERN_JS, $js_options);
  $css_options = array(
    'type' => 'file',
    'group' => CSS_THEME,
  );
  drupal_add_css(drupal_get_path('module', 'googlebook') . "/googlebook.css", $css_options);
}


/**
 * Takes book field data and makes it a link if it address present.
 *
 * @param string $address
 *   The biblio field string, which might be an address.
 *
 * @return string
 *   Returns an HTML <a></a> link if there is a valid address in $address.
 */
function googlebook_make_html_link($address) {
  if (valid_url($address, $absolute = TRUE)) {
    return l(t('link'), $address, array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  }
  return check_plain($address);
}


/**
 * Sets a parameter variable by reference based on presence in array.
 *
 * @param array $params
 *   The parameter array.
 *
 * @param int|string $flag_var
 *   The parameter variable to set.
 *
 * @param string $value
 *   The var to find in the array (needle).
 *
 * @param int|bool $set
 *   What $flag_var will be set to if TRUE.
 */
function googlebook_set_param($params, &$flag_var, $value, $set) {
  if (in_array($value, $params) === TRUE) {
    $flag_var = $set;
  }
}


/**
 * Sets up the theme page for the googlebook filter.
 *
 * @return array
 *   The return array defines the .tpl page
 */
function googlebook_theme() {
  // Return the array describing the template name and vars.
  return array(
    // The main theme template googlebook.tpl.php
    'googlebook_aggregate' => array(
      'template' => 'googlebook',
      'arguments' => array('parameter' => NULL),
    ),
    // Theme function to print biblio fields.
    'googlebookbiblio' => array(
      'variables' => array(),
    ),
  );
}


/**
 * Theme preprocess function for googlebook_aggregate.
 *
 * @param array $variables
 *   Pass by reference the theme variables.
 */
function googlebook_preprocess_googlebook_aggregate(&$variables) {
  // Setup the image array and call theme('image'.
  if ($variables["img_link"] != "") {
      $variables["book_image_array"] = array(
        'path' => $variables["img_link"],
        'alt' => $variables["title"],
        'title' => $variables["title"],
        'width' => $variables["image_width"],
        'height' => $variables["image_height"],
      );
  }

  // Setup the list of biblio data.
  $processed_bibs = array();
  foreach ($variables["selected_bibs"] as $bib_index => $bib_value) {
    $bib_field_name = drupal_ucfirst(preg_replace('/[A-Z]/', ' $0', str_replace('_', ' ', $bib_index)));
    $bib_field_data = googlebook_make_html_link($bib_value);
    $processed_bibs[$bib_field_name] = $bib_field_data;
  }
  $variables["processed_bibs"] = $processed_bibs;
}


/**
 * Theme function for googlebook to print selected biblio fields.
 *
 * @param array $selected_bibs
 *   Pass the selected biblios.
 *
 * @return string
 *   Return the HTML.
 */
function theme_googlebookbiblio($selected_bibs) {
  $html_string = '<ul class="googlebook_datafields">';
  foreach ($selected_bibs as $bib_field_name => $bib_field_data) {
    $html_string .= '<li><span class="googlebook_field_name">'
      . $bib_field_name
      . '</span>: <span class="googlebook_field_data">'
      . $bib_field_data
      . "</span></li>";
  }
  $html_string .= "</ul>";
  return $html_string;
}
